generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
    id        String   @id @default(cuid())
    userId    String
    createdAt DateTime @default(now())
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    isAdmin       Boolean   @default(false)
    username      String?   @unique
    address       String?
    fullName      String?   @default("")
    detailAddress String?
    phoneNumber   String?
    accounts      Account[]
    sessions      Session[]
    orders        Order[]   @relation("UserToOrder")
    image         String?
    inActive      Boolean   @default(false)
}

model Product {
    id          String @id @default(cuid())
    name        String
    shortDes    String
    description String
    price       Int?   @default(0)
    saleOff     Int?   @default(0)
    quantity    Int    @default(1)
    inStock     Int?   @default(0)
    selled      Int    @default(0)
    type        String @default("standard")

    categoryId String?
    brandId    String?
    category   Category? @relation(fields: [categoryId], references: [id])
    brand      Brand?    @relation(fields: [brandId], references: [id])
    optionId   String?
    option     Option?   @relation(fields: [optionId], references: [id])

    images   String[]
    variants Variant[]
    sizes    SizesOnProducts[]
    colors   ColorsOnProduct[]

    orderItems OrderItem[]

    groupCharacter GroupCharacter[]

    isArchived Boolean @default(false)
    deleted    Boolean @default(false)

    active Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryId, brandId])
}

model Option {
    id          String    @id @default(cuid())
    name        String
    description String?
    products    Product[]
}

model Variant {
    id         String   @id @default(cuid())
    image      String?
    productId  String?
    product    Product? @relation(fields: [productId], references: [id])
    sizeId     String?
    size       Size?    @relation(fields: [sizeId], references: [id])
    colorId    String?
    color      Color?   @relation(fields: [colorId], references: [id])
    optionName String?

    inventory Int @default(0)
    price     Int @default(0)

    orderItems OrderItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([colorId])
    @@index([sizeId])
}

model SizesOnProducts {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    sizeId    String
    size      Size     @relation(fields: [sizeId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([sizeId])
}

model ColorsOnProduct {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    colorId   String
    color     Color    @relation(fields: [colorId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
    @@index([colorId])
}

model Size {
    id        String            @id @default(cuid())
    name      String
    value     String
    variants  Variant[]
    products  SizesOnProducts[]
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
}

model Color {
    id        String            @id @default(cuid())
    name      String
    value     String
    variants  Variant[]
    products  ColorsOnProduct[]
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
}

model Category {
    id        String    @id @default(cuid())
    name      String
    thumbnail String
    products  Product[]
}

model Brand {
    id        String    @id @default(cuid())
    name      String
    thumbnail String?
    products  Product[]
}

model Character {
    id        String @id @default(cuid())
    name      String
    thumbnail String

    regionId String
    region   Region @relation(fields: [regionId], references: [id])

    visionId String
    vision   Vision @relation(fields: [visionId], references: [id])

    weaponId String
    weapon   Weapon @relation(fields: [weaponId], references: [id])

    groupCharacter GroupCharacter[]

    @@index([regionId, visionId, weaponId])
}

model Region {
    id         String      @id @default(cuid())
    name       String
    characters Character[]
}

model Weapon {
    id         String      @id @default(cuid())
    name       String
    characters Character[]
}

model Vision {
    id         String      @id @default(cuid())
    name       String
    characters Character[]
}

model GroupCharacter {
    id        String  @id @default(cuid())
    productId String
    product   Product @relation(fields: [productId], references: [id])

    characterId String
    character   Character @relation(fields: [characterId], references: [id])

    @@index([productId])
    @@index([characterId])
}

model Order {
    id         String      @id @default(cuid())
    userId     String?
    user       User?       @relation("UserToOrder", fields: [userId], references: [id])
    fullName   String      @default("")
    orderItems OrderItem[]
    isPaid     Boolean     @default(false)

    payMethod      Int @default(1)
    deliveryMethod Int @default(1)
    total          Int @default(0)

    phone         String  @default("")
    address       String  @default("")
    email         String  @default("")
    detailAddress String  @default("")
    deleted       Boolean @default(false)
    status        Int     @default(1)

    timeLines TimeLine[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    productId String?
    product   Product? @relation(fields: [productId], references: [id])
    variantId String?
    variant   Variant? @relation(fields: [variantId], references: [id])
    quantity  Int      @default(1)
    price     Int      @default(0)

    @@index([orderId])
    @@index([productId])
}

model TimeLine {
    id      String @id @default(cuid())
    orderId String
    order   Order  @relation(fields: [orderId], references: [id])
    status  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderId])
}

enum StatusOrder {
    ORDERED
    PICKING
    DELEVERING
    COMPLETE
}
